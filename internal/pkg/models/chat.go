// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Chat is an object representing the database table.
type Chat struct {
	Cid       int         `boil:"cid" json:"cid" toml:"cid" yaml:"cid"`
	Direct    bool        `boil:"direct" json:"direct" toml:"direct" yaml:"direct"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *chatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChatColumns = struct {
	Cid       string
	Direct    string
	Name      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	Cid:       "cid",
	Direct:    "direct",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var ChatTableColumns = struct {
	Cid       string
	Direct    string
	Name      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	Cid:       "chat.cid",
	Direct:    "chat.direct",
	Name:      "chat.name",
	CreatedAt: "chat.created_at",
	UpdatedAt: "chat.updated_at",
	DeletedAt: "chat.deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ChatWhere = struct {
	Cid       whereHelperint
	Direct    whereHelperbool
	Name      whereHelpernull_String
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	Cid:       whereHelperint{field: "`chat`.`cid`"},
	Direct:    whereHelperbool{field: "`chat`.`direct`"},
	Name:      whereHelpernull_String{field: "`chat`.`name`"},
	CreatedAt: whereHelpertime_Time{field: "`chat`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`chat`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`chat`.`deleted_at`"},
}

// ChatRels is where relationship names are stored.
var ChatRels = struct {
	CidContacts  string
	CidMessages  string
	CidUserChats string
}{
	CidContacts:  "CidContacts",
	CidMessages:  "CidMessages",
	CidUserChats: "CidUserChats",
}

// chatR is where relationships are stored.
type chatR struct {
	CidContacts  ContactSlice  `boil:"CidContacts" json:"CidContacts" toml:"CidContacts" yaml:"CidContacts"`
	CidMessages  MessageSlice  `boil:"CidMessages" json:"CidMessages" toml:"CidMessages" yaml:"CidMessages"`
	CidUserChats UserChatSlice `boil:"CidUserChats" json:"CidUserChats" toml:"CidUserChats" yaml:"CidUserChats"`
}

// NewStruct creates a new relationship struct
func (*chatR) NewStruct() *chatR {
	return &chatR{}
}

// chatL is where Load methods for each relationship are stored.
type chatL struct{}

var (
	chatAllColumns            = []string{"cid", "direct", "name", "created_at", "updated_at", "deleted_at"}
	chatColumnsWithoutDefault = []string{"name", "created_at", "updated_at", "deleted_at"}
	chatColumnsWithDefault    = []string{"cid", "direct"}
	chatPrimaryKeyColumns     = []string{"cid"}
)

type (
	// ChatSlice is an alias for a slice of pointers to Chat.
	// This should almost always be used instead of []Chat.
	ChatSlice []*Chat
	// ChatHook is the signature for custom Chat hook methods
	ChatHook func(context.Context, boil.ContextExecutor, *Chat) error

	chatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chatType                 = reflect.TypeOf(&Chat{})
	chatMapping              = queries.MakeStructMapping(chatType)
	chatPrimaryKeyMapping, _ = queries.BindMapping(chatType, chatMapping, chatPrimaryKeyColumns)
	chatInsertCacheMut       sync.RWMutex
	chatInsertCache          = make(map[string]insertCache)
	chatUpdateCacheMut       sync.RWMutex
	chatUpdateCache          = make(map[string]updateCache)
	chatUpsertCacheMut       sync.RWMutex
	chatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chatBeforeInsertHooks []ChatHook
var chatBeforeUpdateHooks []ChatHook
var chatBeforeDeleteHooks []ChatHook
var chatBeforeUpsertHooks []ChatHook

var chatAfterInsertHooks []ChatHook
var chatAfterSelectHooks []ChatHook
var chatAfterUpdateHooks []ChatHook
var chatAfterDeleteHooks []ChatHook
var chatAfterUpsertHooks []ChatHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Chat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Chat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Chat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Chat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Chat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Chat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Chat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Chat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Chat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChatHook registers your hook function for all future operations.
func AddChatHook(hookPoint boil.HookPoint, chatHook ChatHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		chatBeforeInsertHooks = append(chatBeforeInsertHooks, chatHook)
	case boil.BeforeUpdateHook:
		chatBeforeUpdateHooks = append(chatBeforeUpdateHooks, chatHook)
	case boil.BeforeDeleteHook:
		chatBeforeDeleteHooks = append(chatBeforeDeleteHooks, chatHook)
	case boil.BeforeUpsertHook:
		chatBeforeUpsertHooks = append(chatBeforeUpsertHooks, chatHook)
	case boil.AfterInsertHook:
		chatAfterInsertHooks = append(chatAfterInsertHooks, chatHook)
	case boil.AfterSelectHook:
		chatAfterSelectHooks = append(chatAfterSelectHooks, chatHook)
	case boil.AfterUpdateHook:
		chatAfterUpdateHooks = append(chatAfterUpdateHooks, chatHook)
	case boil.AfterDeleteHook:
		chatAfterDeleteHooks = append(chatAfterDeleteHooks, chatHook)
	case boil.AfterUpsertHook:
		chatAfterUpsertHooks = append(chatAfterUpsertHooks, chatHook)
	}
}

// OneG returns a single chat record from the query using the global executor.
func (q chatQuery) OneG(ctx context.Context) (*Chat, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single chat record from the query.
func (q chatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Chat, error) {
	o := &Chat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chat")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Chat records from the query using the global executor.
func (q chatQuery) AllG(ctx context.Context) (ChatSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Chat records from the query.
func (q chatQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChatSlice, error) {
	var o []*Chat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Chat slice")
	}

	if len(chatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Chat records in the query, and panics on error.
func (q chatQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Chat records in the query.
func (q chatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chat rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q chatQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q chatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chat exists")
	}

	return count > 0, nil
}

// CidContacts retrieves all the contact's Contacts with an executor via cid column.
func (o *Chat) CidContacts(mods ...qm.QueryMod) contactQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`contact`.`cid`=?", o.Cid),
		qmhelper.WhereIsNull("`contact`.`deleted_at`"),
	)

	query := Contacts(queryMods...)
	queries.SetFrom(query.Query, "`contact`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`contact`.*"})
	}

	return query
}

// CidMessages retrieves all the message's Messages with an executor via cid column.
func (o *Chat) CidMessages(mods ...qm.QueryMod) messageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`message`.`cid`=?", o.Cid),
		qmhelper.WhereIsNull("`message`.`deleted_at`"),
	)

	query := Messages(queryMods...)
	queries.SetFrom(query.Query, "`message`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`message`.*"})
	}

	return query
}

// CidUserChats retrieves all the user_chat's UserChats with an executor via cid column.
func (o *Chat) CidUserChats(mods ...qm.QueryMod) userChatQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_chat`.`cid`=?", o.Cid),
		qmhelper.WhereIsNull("`user_chat`.`deleted_at`"),
	)

	query := UserChats(queryMods...)
	queries.SetFrom(query.Query, "`user_chat`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`user_chat`.*"})
	}

	return query
}

// LoadCidContacts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chatL) LoadCidContacts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChat interface{}, mods queries.Applicator) error {
	var slice []*Chat
	var object *Chat

	if singular {
		object = maybeChat.(*Chat)
	} else {
		slice = *maybeChat.(*[]*Chat)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chatR{}
		}
		args = append(args, object.Cid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatR{}
			}

			for _, a := range args {
				if a == obj.Cid {
					continue Outer
				}
			}

			args = append(args, obj.Cid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`contact`),
		qm.WhereIn(`contact.cid in ?`, args...),
		qmhelper.WhereIsNull(`contact.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load contact")
	}

	var resultSlice []*Contact
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice contact")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on contact")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for contact")
	}

	if len(contactAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CidContacts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &contactR{}
			}
			foreign.R.CidChat = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Cid == foreign.Cid {
				local.R.CidContacts = append(local.R.CidContacts, foreign)
				if foreign.R == nil {
					foreign.R = &contactR{}
				}
				foreign.R.CidChat = local
				break
			}
		}
	}

	return nil
}

// LoadCidMessages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chatL) LoadCidMessages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChat interface{}, mods queries.Applicator) error {
	var slice []*Chat
	var object *Chat

	if singular {
		object = maybeChat.(*Chat)
	} else {
		slice = *maybeChat.(*[]*Chat)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chatR{}
		}
		args = append(args, object.Cid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatR{}
			}

			for _, a := range args {
				if a == obj.Cid {
					continue Outer
				}
			}

			args = append(args, obj.Cid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`message`),
		qm.WhereIn(`message.cid in ?`, args...),
		qmhelper.WhereIsNull(`message.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load message")
	}

	var resultSlice []*Message
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice message")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on message")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for message")
	}

	if len(messageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CidMessages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &messageR{}
			}
			foreign.R.CidChat = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Cid == foreign.Cid {
				local.R.CidMessages = append(local.R.CidMessages, foreign)
				if foreign.R == nil {
					foreign.R = &messageR{}
				}
				foreign.R.CidChat = local
				break
			}
		}
	}

	return nil
}

// LoadCidUserChats allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chatL) LoadCidUserChats(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChat interface{}, mods queries.Applicator) error {
	var slice []*Chat
	var object *Chat

	if singular {
		object = maybeChat.(*Chat)
	} else {
		slice = *maybeChat.(*[]*Chat)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chatR{}
		}
		args = append(args, object.Cid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatR{}
			}

			for _, a := range args {
				if a == obj.Cid {
					continue Outer
				}
			}

			args = append(args, obj.Cid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_chat`),
		qm.WhereIn(`user_chat.cid in ?`, args...),
		qmhelper.WhereIsNull(`user_chat.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_chat")
	}

	var resultSlice []*UserChat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_chat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_chat")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_chat")
	}

	if len(userChatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CidUserChats = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userChatR{}
			}
			foreign.R.CidChat = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Cid == foreign.Cid {
				local.R.CidUserChats = append(local.R.CidUserChats, foreign)
				if foreign.R == nil {
					foreign.R = &userChatR{}
				}
				foreign.R.CidChat = local
				break
			}
		}
	}

	return nil
}

// AddCidContactsG adds the given related objects to the existing relationships
// of the chat, optionally inserting them as new records.
// Appends related to o.R.CidContacts.
// Sets related.R.CidChat appropriately.
// Uses the global database handle.
func (o *Chat) AddCidContactsG(ctx context.Context, insert bool, related ...*Contact) error {
	return o.AddCidContacts(ctx, boil.GetContextDB(), insert, related...)
}

// AddCidContacts adds the given related objects to the existing relationships
// of the chat, optionally inserting them as new records.
// Appends related to o.R.CidContacts.
// Sets related.R.CidChat appropriately.
func (o *Chat) AddCidContacts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Contact) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Cid = o.Cid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `contact` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"cid"}),
				strmangle.WhereClause("`", "`", 0, contactPrimaryKeyColumns),
			)
			values := []interface{}{o.Cid, rel.UIDSelf, rel.UIDOther}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Cid = o.Cid
		}
	}

	if o.R == nil {
		o.R = &chatR{
			CidContacts: related,
		}
	} else {
		o.R.CidContacts = append(o.R.CidContacts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &contactR{
				CidChat: o,
			}
		} else {
			rel.R.CidChat = o
		}
	}
	return nil
}

// AddCidMessagesG adds the given related objects to the existing relationships
// of the chat, optionally inserting them as new records.
// Appends related to o.R.CidMessages.
// Sets related.R.CidChat appropriately.
// Uses the global database handle.
func (o *Chat) AddCidMessagesG(ctx context.Context, insert bool, related ...*Message) error {
	return o.AddCidMessages(ctx, boil.GetContextDB(), insert, related...)
}

// AddCidMessages adds the given related objects to the existing relationships
// of the chat, optionally inserting them as new records.
// Appends related to o.R.CidMessages.
// Sets related.R.CidChat appropriately.
func (o *Chat) AddCidMessages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Message) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Cid = o.Cid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `message` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"cid"}),
				strmangle.WhereClause("`", "`", 0, messagePrimaryKeyColumns),
			)
			values := []interface{}{o.Cid, rel.Mid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Cid = o.Cid
		}
	}

	if o.R == nil {
		o.R = &chatR{
			CidMessages: related,
		}
	} else {
		o.R.CidMessages = append(o.R.CidMessages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &messageR{
				CidChat: o,
			}
		} else {
			rel.R.CidChat = o
		}
	}
	return nil
}

// AddCidUserChatsG adds the given related objects to the existing relationships
// of the chat, optionally inserting them as new records.
// Appends related to o.R.CidUserChats.
// Sets related.R.CidChat appropriately.
// Uses the global database handle.
func (o *Chat) AddCidUserChatsG(ctx context.Context, insert bool, related ...*UserChat) error {
	return o.AddCidUserChats(ctx, boil.GetContextDB(), insert, related...)
}

// AddCidUserChats adds the given related objects to the existing relationships
// of the chat, optionally inserting them as new records.
// Appends related to o.R.CidUserChats.
// Sets related.R.CidChat appropriately.
func (o *Chat) AddCidUserChats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserChat) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Cid = o.Cid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_chat` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"cid"}),
				strmangle.WhereClause("`", "`", 0, userChatPrimaryKeyColumns),
			)
			values := []interface{}{o.Cid, rel.UID, rel.Cid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Cid = o.Cid
		}
	}

	if o.R == nil {
		o.R = &chatR{
			CidUserChats: related,
		}
	} else {
		o.R.CidUserChats = append(o.R.CidUserChats, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userChatR{
				CidChat: o,
			}
		} else {
			rel.R.CidChat = o
		}
	}
	return nil
}

// Chats retrieves all the records using an executor.
func Chats(mods ...qm.QueryMod) chatQuery {
	mods = append(mods, qm.From("`chat`"), qmhelper.WhereIsNull("`chat`.`deleted_at`"))
	return chatQuery{NewQuery(mods...)}
}

// FindChatG retrieves a single record by ID.
func FindChatG(ctx context.Context, cid int, selectCols ...string) (*Chat, error) {
	return FindChat(ctx, boil.GetContextDB(), cid, selectCols...)
}

// FindChat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChat(ctx context.Context, exec boil.ContextExecutor, cid int, selectCols ...string) (*Chat, error) {
	chatObj := &Chat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `chat` where `cid`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, cid)

	err := q.Bind(ctx, exec, chatObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chat")
	}

	if err = chatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chatObj, err
	}

	return chatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Chat) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Chat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chat provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chatInsertCacheMut.RLock()
	cache, cached := chatInsertCache[key]
	chatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chatAllColumns,
			chatColumnsWithDefault,
			chatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chatType, chatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chatType, chatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `chat` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `chat` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `chat` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, chatPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chat")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Cid = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == chatMapping["cid"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Cid,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for chat")
	}

CacheNoHooks:
	if !cached {
		chatInsertCacheMut.Lock()
		chatInsertCache[key] = cache
		chatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Chat record using the global executor.
// See Update for more documentation.
func (o *Chat) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Chat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Chat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chatUpdateCacheMut.RLock()
	cache, cached := chatUpdateCache[key]
	chatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chatAllColumns,
			chatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update chat, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `chat` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, chatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chatType, chatMapping, append(wl, chatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update chat row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for chat")
	}

	if !cached {
		chatUpdateCacheMut.Lock()
		chatUpdateCache[key] = cache
		chatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q chatQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q chatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for chat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for chat")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ChatSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `chat` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in chat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all chat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Chat) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLChatUniqueColumns = []string{
	"cid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Chat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chat provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chatColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLChatUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chatUpsertCacheMut.RLock()
	cache, cached := chatUpsertCache[key]
	chatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chatAllColumns,
			chatColumnsWithDefault,
			chatColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chatAllColumns,
			chatPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert chat, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`chat`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `chat` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(chatType, chatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chatType, chatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for chat")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Cid = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == chatMapping["cid"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(chatType, chatMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for chat")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for chat")
	}

CacheNoHooks:
	if !cached {
		chatUpsertCacheMut.Lock()
		chatUpsertCache[key] = cache
		chatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Chat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Chat) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single Chat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Chat) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Chat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chatPrimaryKeyMapping)
		sql = "DELETE FROM `chat` WHERE `cid`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `chat` SET %s WHERE `cid`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(chatType, chatMapping, append(wl, chatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from chat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for chat")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q chatQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q chatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no chatQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chat")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ChatSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `chat` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `chat` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chat")
	}

	if len(chatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Chat) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Chat provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Chat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChat(ctx, exec, o.Cid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChatSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ChatSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `chat`.* FROM `chat` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChatSlice")
	}

	*o = slice

	return nil
}

// ChatExistsG checks if the Chat row exists.
func ChatExistsG(ctx context.Context, cid int) (bool, error) {
	return ChatExists(ctx, boil.GetContextDB(), cid)
}

// ChatExists checks if the Chat row exists.
func ChatExists(ctx context.Context, exec boil.ContextExecutor, cid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `chat` where `cid`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, cid)
	}
	row := exec.QueryRowContext(ctx, sql, cid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chat exists")
	}

	return exists, nil
}
