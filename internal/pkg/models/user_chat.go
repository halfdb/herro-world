// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserChat is an object representing the database table.
type UserChat struct {
	UID       int       `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Cid       int       `boil:"cid" json:"cid" toml:"cid" yaml:"cid"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *userChatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userChatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserChatColumns = struct {
	UID       string
	Cid       string
	CreatedAt string
	DeletedAt string
}{
	UID:       "uid",
	Cid:       "cid",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
}

var UserChatTableColumns = struct {
	UID       string
	Cid       string
	CreatedAt string
	DeletedAt string
}{
	UID:       "user_chat.uid",
	Cid:       "user_chat.cid",
	CreatedAt: "user_chat.created_at",
	DeletedAt: "user_chat.deleted_at",
}

// Generated where

var UserChatWhere = struct {
	UID       whereHelperint
	Cid       whereHelperint
	CreatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	UID:       whereHelperint{field: "`user_chat`.`uid`"},
	Cid:       whereHelperint{field: "`user_chat`.`cid`"},
	CreatedAt: whereHelpertime_Time{field: "`user_chat`.`created_at`"},
	DeletedAt: whereHelpernull_Time{field: "`user_chat`.`deleted_at`"},
}

// UserChatRels is where relationship names are stored.
var UserChatRels = struct {
	UIDUser string
	CidChat string
}{
	UIDUser: "UIDUser",
	CidChat: "CidChat",
}

// userChatR is where relationships are stored.
type userChatR struct {
	UIDUser *User `boil:"UIDUser" json:"UIDUser" toml:"UIDUser" yaml:"UIDUser"`
	CidChat *Chat `boil:"CidChat" json:"CidChat" toml:"CidChat" yaml:"CidChat"`
}

// NewStruct creates a new relationship struct
func (*userChatR) NewStruct() *userChatR {
	return &userChatR{}
}

// userChatL is where Load methods for each relationship are stored.
type userChatL struct{}

var (
	userChatAllColumns            = []string{"uid", "cid", "created_at", "deleted_at"}
	userChatColumnsWithoutDefault = []string{"uid", "cid", "created_at", "deleted_at"}
	userChatColumnsWithDefault    = []string{}
	userChatPrimaryKeyColumns     = []string{"uid", "cid"}
)

type (
	// UserChatSlice is an alias for a slice of pointers to UserChat.
	// This should almost always be used instead of []UserChat.
	UserChatSlice []*UserChat
	// UserChatHook is the signature for custom UserChat hook methods
	UserChatHook func(context.Context, boil.ContextExecutor, *UserChat) error

	userChatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userChatType                 = reflect.TypeOf(&UserChat{})
	userChatMapping              = queries.MakeStructMapping(userChatType)
	userChatPrimaryKeyMapping, _ = queries.BindMapping(userChatType, userChatMapping, userChatPrimaryKeyColumns)
	userChatInsertCacheMut       sync.RWMutex
	userChatInsertCache          = make(map[string]insertCache)
	userChatUpdateCacheMut       sync.RWMutex
	userChatUpdateCache          = make(map[string]updateCache)
	userChatUpsertCacheMut       sync.RWMutex
	userChatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userChatBeforeInsertHooks []UserChatHook
var userChatBeforeUpdateHooks []UserChatHook
var userChatBeforeDeleteHooks []UserChatHook
var userChatBeforeUpsertHooks []UserChatHook

var userChatAfterInsertHooks []UserChatHook
var userChatAfterSelectHooks []UserChatHook
var userChatAfterUpdateHooks []UserChatHook
var userChatAfterDeleteHooks []UserChatHook
var userChatAfterUpsertHooks []UserChatHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserChat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userChatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserChat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userChatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserChat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userChatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserChat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userChatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserChat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userChatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserChat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userChatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserChat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userChatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserChat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userChatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserChat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userChatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserChatHook registers your hook function for all future operations.
func AddUserChatHook(hookPoint boil.HookPoint, userChatHook UserChatHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userChatBeforeInsertHooks = append(userChatBeforeInsertHooks, userChatHook)
	case boil.BeforeUpdateHook:
		userChatBeforeUpdateHooks = append(userChatBeforeUpdateHooks, userChatHook)
	case boil.BeforeDeleteHook:
		userChatBeforeDeleteHooks = append(userChatBeforeDeleteHooks, userChatHook)
	case boil.BeforeUpsertHook:
		userChatBeforeUpsertHooks = append(userChatBeforeUpsertHooks, userChatHook)
	case boil.AfterInsertHook:
		userChatAfterInsertHooks = append(userChatAfterInsertHooks, userChatHook)
	case boil.AfterSelectHook:
		userChatAfterSelectHooks = append(userChatAfterSelectHooks, userChatHook)
	case boil.AfterUpdateHook:
		userChatAfterUpdateHooks = append(userChatAfterUpdateHooks, userChatHook)
	case boil.AfterDeleteHook:
		userChatAfterDeleteHooks = append(userChatAfterDeleteHooks, userChatHook)
	case boil.AfterUpsertHook:
		userChatAfterUpsertHooks = append(userChatAfterUpsertHooks, userChatHook)
	}
}

// OneG returns a single userChat record from the query using the global executor.
func (q userChatQuery) OneG(ctx context.Context) (*UserChat, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single userChat record from the query.
func (q userChatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserChat, error) {
	o := &UserChat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_chat")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserChat records from the query using the global executor.
func (q userChatQuery) AllG(ctx context.Context) (UserChatSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all UserChat records from the query.
func (q userChatQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserChatSlice, error) {
	var o []*UserChat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserChat slice")
	}

	if len(userChatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserChat records in the query, and panics on error.
func (q userChatQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all UserChat records in the query.
func (q userChatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_chat rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userChatQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q userChatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_chat exists")
	}

	return count > 0, nil
}

// UIDUser pointed to by the foreign key.
func (o *UserChat) UIDUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`uid` = ?", o.UID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// CidChat pointed to by the foreign key.
func (o *UserChat) CidChat(mods ...qm.QueryMod) chatQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`cid` = ?", o.Cid),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Chats(queryMods...)
	queries.SetFrom(query.Query, "`chat`")

	return query
}

// LoadUIDUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userChatL) LoadUIDUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserChat interface{}, mods queries.Applicator) error {
	var slice []*UserChat
	var object *UserChat

	if singular {
		object = maybeUserChat.(*UserChat)
	} else {
		slice = *maybeUserChat.(*[]*UserChat)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userChatR{}
		}
		args = append(args, object.UID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userChatR{}
			}

			for _, a := range args {
				if a == obj.UID {
					continue Outer
				}
			}

			args = append(args, obj.UID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.uid in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userChatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UIDUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UIDUserChats = append(foreign.R.UIDUserChats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UID == foreign.UID {
				local.R.UIDUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UIDUserChats = append(foreign.R.UIDUserChats, local)
				break
			}
		}
	}

	return nil
}

// LoadCidChat allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userChatL) LoadCidChat(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserChat interface{}, mods queries.Applicator) error {
	var slice []*UserChat
	var object *UserChat

	if singular {
		object = maybeUserChat.(*UserChat)
	} else {
		slice = *maybeUserChat.(*[]*UserChat)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userChatR{}
		}
		args = append(args, object.Cid)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userChatR{}
			}

			for _, a := range args {
				if a == obj.Cid {
					continue Outer
				}
			}

			args = append(args, obj.Cid)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chat`),
		qm.WhereIn(`chat.cid in ?`, args...),
		qmhelper.WhereIsNull(`chat.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chat")
	}

	var resultSlice []*Chat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chat")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chat")
	}

	if len(userChatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CidChat = foreign
		if foreign.R == nil {
			foreign.R = &chatR{}
		}
		foreign.R.CidUserChats = append(foreign.R.CidUserChats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Cid == foreign.Cid {
				local.R.CidChat = foreign
				if foreign.R == nil {
					foreign.R = &chatR{}
				}
				foreign.R.CidUserChats = append(foreign.R.CidUserChats, local)
				break
			}
		}
	}

	return nil
}

// SetUIDUserG of the userChat to the related item.
// Sets o.R.UIDUser to related.
// Adds o to related.R.UIDUserChats.
// Uses the global database handle.
func (o *UserChat) SetUIDUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUIDUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUIDUser of the userChat to the related item.
// Sets o.R.UIDUser to related.
// Adds o to related.R.UIDUserChats.
func (o *UserChat) SetUIDUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_chat` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"uid"}),
		strmangle.WhereClause("`", "`", 0, userChatPrimaryKeyColumns),
	)
	values := []interface{}{related.UID, o.UID, o.Cid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UID = related.UID
	if o.R == nil {
		o.R = &userChatR{
			UIDUser: related,
		}
	} else {
		o.R.UIDUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UIDUserChats: UserChatSlice{o},
		}
	} else {
		related.R.UIDUserChats = append(related.R.UIDUserChats, o)
	}

	return nil
}

// SetCidChatG of the userChat to the related item.
// Sets o.R.CidChat to related.
// Adds o to related.R.CidUserChats.
// Uses the global database handle.
func (o *UserChat) SetCidChatG(ctx context.Context, insert bool, related *Chat) error {
	return o.SetCidChat(ctx, boil.GetContextDB(), insert, related)
}

// SetCidChat of the userChat to the related item.
// Sets o.R.CidChat to related.
// Adds o to related.R.CidUserChats.
func (o *UserChat) SetCidChat(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Chat) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_chat` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"cid"}),
		strmangle.WhereClause("`", "`", 0, userChatPrimaryKeyColumns),
	)
	values := []interface{}{related.Cid, o.UID, o.Cid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Cid = related.Cid
	if o.R == nil {
		o.R = &userChatR{
			CidChat: related,
		}
	} else {
		o.R.CidChat = related
	}

	if related.R == nil {
		related.R = &chatR{
			CidUserChats: UserChatSlice{o},
		}
	} else {
		related.R.CidUserChats = append(related.R.CidUserChats, o)
	}

	return nil
}

// UserChats retrieves all the records using an executor.
func UserChats(mods ...qm.QueryMod) userChatQuery {
	mods = append(mods, qm.From("`user_chat`"), qmhelper.WhereIsNull("`user_chat`.`deleted_at`"))
	return userChatQuery{NewQuery(mods...)}
}

// FindUserChatG retrieves a single record by ID.
func FindUserChatG(ctx context.Context, uID int, cid int, selectCols ...string) (*UserChat, error) {
	return FindUserChat(ctx, boil.GetContextDB(), uID, cid, selectCols...)
}

// FindUserChat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserChat(ctx context.Context, exec boil.ContextExecutor, uID int, cid int, selectCols ...string) (*UserChat, error) {
	userChatObj := &UserChat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_chat` where `uid`=? AND `cid`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, uID, cid)

	err := q.Bind(ctx, exec, userChatObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_chat")
	}

	if err = userChatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userChatObj, err
	}

	return userChatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserChat) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserChat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_chat provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userChatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userChatInsertCacheMut.RLock()
	cache, cached := userChatInsertCache[key]
	userChatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userChatAllColumns,
			userChatColumnsWithDefault,
			userChatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userChatType, userChatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userChatType, userChatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_chat` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_chat` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_chat` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userChatPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_chat")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UID,
		o.Cid,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_chat")
	}

CacheNoHooks:
	if !cached {
		userChatInsertCacheMut.Lock()
		userChatInsertCache[key] = cache
		userChatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single UserChat record using the global executor.
// See Update for more documentation.
func (o *UserChat) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the UserChat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserChat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userChatUpdateCacheMut.RLock()
	cache, cached := userChatUpdateCache[key]
	userChatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userChatAllColumns,
			userChatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_chat, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_chat` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userChatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userChatType, userChatMapping, append(wl, userChatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_chat row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_chat")
	}

	if !cached {
		userChatUpdateCacheMut.Lock()
		userChatUpdateCache[key] = cache
		userChatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userChatQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userChatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_chat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_chat")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserChatSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserChatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userChatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_chat` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userChatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userChat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userChat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserChat) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLUserChatUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserChat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_chat provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userChatColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserChatUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userChatUpsertCacheMut.RLock()
	cache, cached := userChatUpsertCache[key]
	userChatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userChatAllColumns,
			userChatColumnsWithDefault,
			userChatColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userChatAllColumns,
			userChatPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_chat, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_chat`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_chat` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userChatType, userChatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userChatType, userChatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_chat")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userChatType, userChatMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_chat")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_chat")
	}

CacheNoHooks:
	if !cached {
		userChatUpsertCacheMut.Lock()
		userChatUpsertCache[key] = cache
		userChatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single UserChat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserChat) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single UserChat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserChat) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserChat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userChatPrimaryKeyMapping)
		sql = "DELETE FROM `user_chat` WHERE `uid`=? AND `cid`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `user_chat` SET %s WHERE `uid`=? AND `cid`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(userChatType, userChatMapping, append(wl, userChatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_chat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_chat")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userChatQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q userChatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userChatQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_chat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_chat")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserChatSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserChatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userChatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userChatPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `user_chat` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userChatPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userChatPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `user_chat` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userChatPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userChat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_chat")
	}

	if len(userChatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserChat) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no UserChat provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserChat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserChat(ctx, exec, o.UID, o.Cid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserChatSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty UserChatSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserChatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserChatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userChatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_chat`.* FROM `user_chat` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userChatPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserChatSlice")
	}

	*o = slice

	return nil
}

// UserChatExistsG checks if the UserChat row exists.
func UserChatExistsG(ctx context.Context, uID int, cid int) (bool, error) {
	return UserChatExists(ctx, boil.GetContextDB(), uID, cid)
}

// UserChatExists checks if the UserChat row exists.
func UserChatExists(ctx context.Context, exec boil.ContextExecutor, uID int, cid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_chat` where `uid`=? AND `cid`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uID, cid)
	}
	row := exec.QueryRowContext(ctx, sql, uID, cid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_chat exists")
	}

	return exists, nil
}
